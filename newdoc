#!/bin/bash
# {{{ Script Overview and program flags.
#
# This script creates the scaffolding for a new LaTeX document that is
# compatible with docbld.
#
# These flags enable optional features.

dirFlag=0;         # Create a directory when true.
fileFlag=0;        # Create file when true.
helpFlag=1;        # Show help.
logoFlag=0;        # Copy a logo when requested.
shareFlag=0;       # Use shared document header and footer when true.
tofFlag=0;         # Create a test results hook into Test Output Factory.
titleFlag=0;       # Document title to use when true.

source "$NEWDOCPATH/document_types"

docType=''

# -------------------------------------------------------------------------- }}}
# {{{ main: Orchestrate the show.

main() {
  parseOptions "$@"
  if [[ $helpFlag == 1 ]]; then
    showHelp
  else
    makeDoc
  fi
}

# -------------------------------------------------------------------------- }}}
# {{{ showHelp: Show the help text for the script and then terminate execution.

showHelp() {
   echo "Run newdoc to create the scaffolding for a new LaTeX document "
   echo "that is compatible with autodoc, docbld, and tlc-article."
   echo
   echo "Usage: newdoc -dir= [other options]"
   echo
   echo "OPTIONS"
   echo "  --dir=path/to/dir              Directory to create."
   echo "  --file=fileName                File to create."
   echo "  --title='Your Document Title'  Document title to use."
   echo
   echo "  --type=(one of:) ${docTypes[@]}"
   echo
   echo "  --logo                         Seed document a logo."
   echo "  --share                        Use shared header and footer data."
   echo
   echo "  --tof                          Hook into Test Output Factory."
   echo ""
   echo "  --help                         Display this help message."
   echo ""
   checkForNewDocPath
}

# -------------------------------------------------------------------------- }}}
# {{{ parseOptions: Parse command line.
#
# Parse the command line options.   If the help flag is encountered, or if the
# command line option is not recognized, then display the help information and
# terminate gracefully.
#
# Arguments:
# A non-empty array containing the command line options.

parseOptions() {
  # Iterate through the list of options.
  if [[ $# -eq 0 ]]; then
    helpFlag=1
  else
    helpFlag=0
    for var in "$@"
    do
      case $var in
        --dir*)
          dir="${var#*=}"
          dirFlag=1
          shift
          ;;
        --file*)
          fileName="${var#*=}"
          fileFlag=1
          shift
          ;;
        --help)
          helpFlag=1
          ;;
        --logo*)
          logoFlag=1
          shift
          ;;
        --title*)
          title="${var#*=}"
          titleFlag=1
          shift
          ;;
        --tof*)
          tofFlag=1
          shift
          ;;
        --type*)
          checkDocType "${var#*=}"
          shift
          ;;
        --share*)
          shareFlag=1
          shift
          ;;
        *)
          echo "Unknown argument $var"
          echo
          helpFlag=1
          ;;
      esac
      shift
    done
  fi
}

# -------------------------------------------------------------------------- }}}
# {{{ makedoc: setup scaffolding

# makeDoc orchestrates setting up the scaffolding needed for a new LaTeX
# document that is compliant with tlc-article, autodoc, docbld, and amber.
#
# This function is the workflow.  Each function called determines whether or not
# it has work.  Each function will setup environment variables that other
# functions may use.

makeDoc() {
  # NEWDOCPATH must be defined.
  checkForNewDocPath
  checkForValidFlags

  # Save current working directory.
  cwd=$(pwd)

  # Move to NEWDOCPATH
  cd ${NEWDOCPATH}

  # Create document directories.
  createDocDir
  createDataDir
  createSharedDataDir
  createTOFDir

  # Uppercase the document number.
  toUpperdocNbr

  # Copy files to the new document location.
  copyTexFile
  copyTexxBuilderFile
  copyChangeSummary
  copySignatures
  copyVersion
  copyAdditionalLayout
  copyHeaderFooter
  copyLogo
  copyTOF

  # Returned to saved working directory.
  cd ${cwd}
}

# -------------------------------------------------------------------------- }}}
# {{{ checkDocType: validate document type entered.

# A valid document type will always be returned.
checkDocType() {
  for dt in ${docTypes[@]}; do
    if [[ $dt == $1 ]]; then
      docType=$dt
      break;
    fi
  done
  if [[ $docType == '' ]]; then
    echo "Document type" $1 " is not supported."
    echo "Use one of" ${docTypes[@]}
    exit
  fi
}

# -------------------------------------------------------------------------- }}}
# {{{ checkForNewDocPath: check for NEWDOCPATH

checkForNewDocPath() {
  if [[ ! -d ${NEWDOCPATH} ]]; then
    abort "NEWDOCPATH must be defined."
  fi
}

# -------------------------------------------------------------------------- }}}
# {{{ checkForValidFlags: check for valid command line flags.

checkForValidFlags() {
  if [[ $dirFlag == 0 ]]; then
    abort "--dir option must be used."
  fi

  if [[ $titleFlag == 1 ]] && [[ $fileFlag == 0 ]]; then
    abort "--file option must be used when --title is used."
  fi
}

# -------------------------------------------------------------------------- }}}
# {{{ createDocDir: Create document directories from your current directory.

createDocDir() {
  if [[ $dirFlag == 1 ]]; then
    subDir=''"${cwd}"'/'"${dir}"''
    msg "Creating document directory ${subDir}"
    mkdir -p -v ${subDir}
  fi
}

# -------------------------------------------------------------------------- }}}
# {{{ createDataDir: Create the data directory that is needed for document data.

createDataDir() {
  if [[ $dirFlag == 1 ]]; then
    dataDir=''"${subDir}"/data''
    msg "Creating document data directory ${dataDir}"
    mkdir -p -v ${dataDir}
  fi
}

# -------------------------------------------------------------------------- }}}
# {{{ createSharedDataDir: Create the shared data directory when needed to share
# LaTeX files.

createSharedDataDir() {
  if [[ $shareFlag == 1 ]]; then
    sharedDataDir=''"${subDir%/*}"/shared/data''
    msg "Creating project shared data directory ${sharedDataDir}"
    mkdir -p -v ${sharedDataDir}
  fi
}

# -------------------------------------------------------------------------- }}}
# {{{ createTODDir: Create the test-output directory when the Test Output
# Factory is requested.

createTOFDir() {
  if [[ $tofFlag == 1 ]]; then
    tofDir="${subDir}/test-output"
    msg "Creating Test Output Factory ${tofDir}"
    mkdir -p -v ${tofDir}
  fi
}

# -------------------------------------------------------------------------- }}}
# {{{ toUpperdocNbr: toUpper docNbr for the title only.

toUpperdocNbr() {
  docNbr=`echo "${fileName}" | tr '[[:lower:]]' '[[:upper:]]'`
}

# ------------------------------------------------------------------------------
# {{{ copyTextFile: Use sed to replace markers in the tex file.

copyTexFile() {
  if [[ $fileFlag == 1 ]]; then
    msg "Copying primary LaTeX file ${subDir}/${fileName}.tex"
    sed -e 's/%docType/'"${docType}"'/' \
        -e 's/%docTitle/'"${title}"'/' \
        -e 's/%\\input/\\input/'  data/nnnnnn.txt > ${subDir}/${fileName}.tex
  fi
}

# -------------------------------------------------------------------------- }}}
# {{{ copyTexxBuilderFile: Use sed to replace markers in the texx builder file.

copyTexxBuilderFile() {
  if [[ $fileFlag == 1 ]]; then
    msg "Copying docbld file ${subDir}/${fileName}.texx"
    sed -e 's/%docNbr/'"${fileName}"'/' \
          data/nnnnnn.txtt > ${subDir}/${fileName}.texx
  fi
}

# -------------------------------------------------------------------------- }}}
# {{{ copyChangeSummary: A boilerplate document change summary is copied to the
#     document directory.

copyChangeSummary() {
  if [[ $fileFlag == 1 ]]; then
    msg "Copying change summary file ${subDir}/change-summary.texx"
    cp -v data/change-summary.tex ${subDir}/change-summary.tex
  fi
}

# -------------------------------------------------------------------------- }}}
# {{{ copySignatures: A boilerplate document signature is copied to the document
#     directory.

copySignatures() {
  if [[ $fileFlag == 1 ]]; then
    msg "Copying signature file ${subDir}/signatures.tex"
    cp -v data/signatures.tex ${subDir}/signatures.tex
  fi
}

# -------------------------------------------------------------------------- }}}
# {{{ copyVerion: Use sed to replace markers in version.txt.

copyVersion() {
  if [[ $fileFlag == 1 ]]; then
    msg "Copying version file ${dataDir}/${dataDir}.tex"
    sed -e 's/%docNbr/'"${docNbr}"'/' data/version.txt > ${dataDir}/version.tex
  fi
}

# -------------------------------------------------------------------------- }}}
# {{{ copyAdditionalLayout: Copy files used by tlc-article to layout document to
#     the data directory.

copyAdditionalLayout() {
  if [[ $fileFlag == 1 ]]; then
    msg "Copying additional layout file ${dataDir}/additional-layout.tex"

    if [[ $shareFlag == 1 ]]; then
      cp -v data/additional-layout-shared.tex ${dataDir}/additional-layout.tex

      # Don't overwrite an existing file.
      if [[ ! -f "${sharedDataDir}/additional-layout.tex" ]]; then
        msg "Copying shared additional layout file ${sharedDataDir}/additional-layout.tex"
        sed -e 's/%dataDir/..\/shared\/data/'  \
                data/additional-layout.txt > \
                ${sharedDataDir}/additional-layout.tex
      fi

    else
      sed -e 's/%dataDir/data/' \
              data/additional-layout.txt > ${dataDir}/additional-layout.tex
    fi
  fi
}

# -------------------------------------------------------------------------- }}}
# {{{ copyHeaderFooter: Copy files used by tlc-article to layout header and
#     document footer to the data directory.

copyHeaderFooter() {
  if [[ $fileFlag == 1 ]]; then
    msg "Copying header footer file ${dataDir}/header-footer.tex"
    if [[ $shareFlag == 1 ]]; then
      cp -v data/header-footer-shared.tex ${dataDir}/header-footer.tex

      # Don't overwrite an existing file.
      if [[ ! -f "${sharedDataDir}/header-footer.tex" ]]; then
        cp -v data/header-footer.tex ${sharedDataDir}/header-footer.tex
      fi

    else
      cp -v data/header-footer.tex ${dataDir}/header-footer.tex
    fi
  fi
}

# -------------------------------------------------------------------------- }}}
# {{{ copyLogo: Copy document logo when requested.

copyLogo() {
  if [[ $logoFlag == 1 ]]; then
    msg "Copying logo file ${dataDir}/logo.png"
    cp -v data/logo.png ${dataDir}/logo.png
  fi
}

# -------------------------------------------------------------------------- }}}
# copyTOF: Copy Test Output Factory when requested.

copyTOF() {
  if [[ $tofFlag == 1 ]]; then
    msg "Copying Test Output Factory file ${tofDir}"
    cp -v data/test-results.tex ${tofDir}/test-results.tex
  fi
}

# -------------------------------------------------------------------------- }}}
# {{{ abort: Aborting this procedure.

abort() {
  msg "Aborting: ${1}"
  exit
}

# -------------------------------------------------------------------------- }}}
# {{{ msg: msg is used to format strings to the console.

msg() {
  echo
  echo $1
}

# -------------------------------------------------------------------------- }}}
# {{{ Kick start this script.

main "$@"

# -------------------------------------------------------------------------- }}}
